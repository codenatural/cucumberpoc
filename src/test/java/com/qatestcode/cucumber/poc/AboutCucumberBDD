What is BDD?

Behaviour-Driven Development (BDD) is the software development process that Cucumber was built to support

Why BDD Needed ?

BDD is a way for software teams to work that closes the gap between business people and technical people by:


    Encouraging collaboration across roles to build shared understanding of the problem to be solved
    Working in rapid, small iterations to increase feedback and the flow of value
    Producing system documentation that is automatically checked against the system’s behaviour

    
What is Cucumber?

Cucumber reads executable specifications written in plain text and validates that the software does what those specifications say.
The specifications consists of multiple examples, or scenarios. For example:


Scenario: Breaker guesses a word
  Given the Maker has chosen a word
  When the Breaker makes a guess
  Then the Maker is asked to score
  
Each scenario is a list of steps for Cucumber to work through. Cucumber verifies that the software conforms with the specification and generates a report indicating ✅ success or ❌ failure for each scenario.

In order for Cucumber to understand the scenarios, they must follow some basic syntax rules, called Gherkin.


What is Gherkin?

Gherkin is a set of grammar rules that makes plain text structured enough for Cucumber to understand. 

The Cucumber grammar exists in different flavours for many spoken languages so that your team can use the keywords in your own language.

Gherkin documents are stored in .feature text files and are typically versioned in source control alongside the software.


In order to allow Gherkin to be written in a number of languages, the keywords have been translated into multiple languages. To improve readability and flow, some languages may have more than one translation for any given keyword.


The language you choose for Gherkin should be the same language your users and domain experts use when they talk about the domain. Translating between two languages should be avoided.

This is why Gherkin has been translated to over 70 languages .

Here is a Gherkin scenario written in Norwegian:

# language: no
Funksjonalitet: Gjett et ord

  Eksempel: Ordmaker starter et spill
    Når Ordmaker starter et spill
    Så må Ordmaker vente på at Gjetter blir med

  Eksempel: Gjetter blir med
    Gitt at Ordmaker har startet et spill med ordet "bløtt"
    Når Gjetter blir med på Ordmakers spill
    Så må Gjetter gjette et ord på 5 bokstaver

    
A # language: header on the first line of a feature file tells Cucumber what spoken language to use - for example # language: fr for French. If you omit this header, Cucumber will default to English (en).

Some Cucumber implementations also let you set the default language in the configuration, so you don’t need to place the # language header in every file.

Hindi (hi)	

English Keyword	Hindi equivalent(s)

feature	रूप लेख

background	पृष्ठभूमि

scenario	परिदृश्य

scenarioOutline	परिदृश्य रूपरेखा

examples	उदाहरण

given	* 
	अगर 
	यदि 
	चूंकि 
when	* 

	जब 
	कदा 
then	* 
	तब 
	तदा 
	
and	* 
	और 
	तथा 
	
but	* 
	पर 
	परन्तु 
	किन्तु 
	
	
rule	नियम


What are Step Definitions?

Step definitions connect Gherkin steps to programming code. A step definition carries out the action that should be performed by the step. So step definitions hard-wire the specification to the implementation.

┌────────────┐                 ┌──────────────┐                 ┌───────────┐
│   Steps    │                 │     Step     │                 │           │
│ in Gherkin ├──matched with──>│ Definitions  ├───manipulates──>│  System   │
│            │                 │              │                 │           │
└────────────┘                 └──────────────┘                 └───────────┘


Step definitions can be written in many programming languages. Here is an example using JavaScript:

When("{maker} starts a game", function(maker) {
  maker.startGameWithWord({ word: "whale" })
})



